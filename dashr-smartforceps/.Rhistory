as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[3])
as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[4])
round(as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[5]), digits=4)
as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[5])
as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[15])
data_info <- read.xls ("~/Desktop/Canada/neuroArm/SmartForceps/SmartForceps Data/Data Info.xlsx",
sheet = 1, header = TRUE)
data_dir <- "~/Desktop/Canada/neuroArm/SmartForceps/SmartForceps Data"
cases <- c(2:21)
# preparing each case data
for (i in cases) {
file_dir <- paste(c(data_dir, paste(c("Case", i), collapse = " "), "log data"), collapse ="/")
temp <- list.files(path = file_dir, pattern = "*.txt")
my_data <- data.frame()
for (j in 1:length(temp)) {
read_txt <- read.delim(paste(c(file_dir, temp[j]), collapse = "/"))
my_data <- rbind(my_data,
cbind(data.frame(DataSection = rep(j, dim(read_txt)[1])),
read_txt))
assign(paste0("case_", i, "_forcedata"), my_data)
}}
# concatenating case data
force_seg_data <- data.frame()
force_seg_info <- data.frame()
task_count <- c(0,0,0,0,0)
outlier_count <- 0
for (i in 1:length(cases)) {
case_i_info <- data_info[data_info[, "Case"] == cases[i],]
case_i_data <- get(paste(c("case", cases[i], "forcedata"), collapse = "_"))
case_i_secpowerupstartidxs <- c(1, which(diff(case_i_data$DataSection) != 0) + 1)
case_i_secpoweruptimes <- case_i_data$MillisecondsSincePowerUp[case_i_secpowerupstartidxs]
for (j in 1:dim(case_i_info)[1]) {
data_section <-
as.numeric(strsplit(toString(case_i_info$Remarks[j]), split = " ")[[1]][2])
task_type <-
strsplit(str_sub(case_i_info$Task[j]), split = " ")[[1]][1]
t_start <-
as.numeric(seconds(hms(case_i_info$TimeStart[j]))) * 1000 + case_i_secpoweruptimes[data_section]
t_end <-
as.numeric(seconds(hms(case_i_info$TimeEnd[j]))) * 1000 + case_i_secpoweruptimes[data_section]
idx_start <-
as.numeric(rownames(case_i_data[case_i_data[, "MillisecondsSincePowerUp"] == t_start, ]))
idx_end <-
as.numeric(rownames(case_i_data[case_i_data[, "MillisecondsSincePowerUp"] == t_end, ]))
# filtering the outliers: cutoffValues = [time, max value, min value, task id]
taskCutoffValues <- switch(task_type,
"Coagulation"  = c(70,1.5, 1, 1),
"Pulling"      = c(30,1.5, 1, 2),
"Manipulation" = c(30,1.5,0.5,3),
"Dissecting"   = c(50,1.5,0.5,4),
"Retracting"   = c(20,1.5,0.5,5),)
segDur <- length(idx_end:idx_start)*0.05-0.05
segMax <- mean(max(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]),
max(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]))
segMin <- abs(mean(min(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]),
min(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])))
if(sum(c(segDur, segMax, segMin) < taskCutoffValues[1:3]) == 3){
task_count[taskCutoffValues[4]] <- task_count[taskCutoffValues[4]] + 1
# segment data
force_seg_data <- rbind(
force_seg_data,
data.frame(
"CaseNum" = rep(cases[i], length(idx_end:idx_start)),
"SegmentNum" = rep(j, length(idx_end:idx_start)),
"SegmentNumTask" = rep(task_count[taskCutoffValues[4]] ,length(idx_end:idx_start)),
"Time" = seq(0, length(idx_end:idx_start)*0.05-0.05, by=0.05),
"LeftForce" = case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"],
"RightForce" = case_i_data[idx_start:idx_end, "RightCalibratedForceValue"],
"TaskType" = rep(task_type, length(idx_end:idx_start))
))
# segment info
force_seg_info <- rbind(
force_seg_info,
data.frame(
"CaseNum" = cases[i],
"SegmentNum" = j,
"MeanForceLeft" = round(mean(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]), digits=4),
"MeanForceRight" = round(mean(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]), digits=4),
"MaxForceLeft" = round(max(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]), digits=4),
"MaxForceRight" = round(max(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]), digits=4),
"MinForceLeft" = round(min(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]), digits=4),
"MinForceRight" = round(min(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]), digits=4),
"RangeForceLeft" = round(abs(diff(range(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]))), digits=4),
"RangeForceRight" = round(abs(diff(range(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]))), digits=4),
"DurationForce" = round(length(idx_end:idx_start)*0.05-0.05, digits=4),
"Frequency" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[1]),
"Nperiods" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[2]),
"SeasonaPeriod" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[3]),
"Trend" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[4]),
"Spike" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[5]),
"Linearity" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[6]),
"Curvature" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[7]),
"AutocorrFuncE1" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[8]),
"AutocorrFuncE10" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[9]),
"Entropy" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[10]),
"AutocorrFuncX1" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[11]),
"AutocorrFuncX10" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[12]),
"DiffAutocorrFunc1" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[13]),
"DiffAutocorrFunc10" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[14]),
"DDiffAutocorrFunc1" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[15]),
"DDiffAutocorrFunc10" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[16]),
"TaskType" = task_type
))
}
else {
#print("outlier detected")
outlier_count <- outlier_count + 1
}
}
}
force_summary <-
data.frame(
"Coagulation.mean" = round(colMeans(force_seg_info[force_seg_info$TaskType %in% 'Coagulation', 3:11]), digits=4),
"Coagulation.std" = round(colStdevs(force_seg_info[force_seg_info$TaskType %in% 'Coagulation', 3:11]), digits=4),
"Pulling.mean" = round(colMeans(force_seg_info[force_seg_info$TaskType %in% 'Pulling', 3:11]), digits=4),
"Pulling.std" = round(colStdevs(force_seg_info[force_seg_info$TaskType %in% 'Pulling', 3:11]), digits=4),
"Manipulation.mean" = round(colMeans(force_seg_info[force_seg_info$TaskType %in% 'Manipulation', 3:11]), digits=4),
"Manipulation.std" = round(colStdevs(force_seg_info[force_seg_info$TaskType %in% 'Manipulation', 3:11]), digits=4),
"Dissecting.mean" = round(colMeans(force_seg_info[force_seg_info$TaskType %in% 'Dissecting', 3:11]), digits=4),
"Dissecting.std" = round(colStdevs(force_seg_info[force_seg_info$TaskType %in% 'Dissecting', 3:11]), digits=4),
"Retracting.mean" = round(colMeans(force_seg_info[force_seg_info$TaskType %in% 'Retracting', 3:11]), digits=4),
"Retracting.std" = round(colStdevs(force_seg_info[force_seg_info$TaskType %in% 'Retracting', 3:11]), digits=4)
)
force_summary
save(
case_2_forcedata,
case_3_forcedata,
case_4_forcedata,
case_5_forcedata,
case_6_forcedata,
case_7_forcedata,
case_8_forcedata,
case_9_forcedata,
case_10_forcedata,
case_11_forcedata,
case_12_forcedata,
case_13_forcedata,
case_14_forcedata,
case_15_forcedata,
case_16_forcedata,
case_17_forcedata,
case_18_forcedata,
case_19_forcedata,
case_20_forcedata,
case_21_forcedata,
file = "~/Desktop/Canada/neuroArm/SmartForceps/SmartForceps Data/SmartForcepsDataRead.RData")
save(
force_seg_data,
file = "~/Desktop/Canada/neuroArm/SmartForceps/SmartForceps Data/SmartForcepsDataProcessed.RData"
)
save(
force_seg_info,
file = "~/Desktop/Canada/neuroArm/SmartForceps/SmartForceps Data/SmartForcepsDataFeature.RData"
)
save(
force_summary,
file = "~/Desktop/Canada/neuroArm/SmartForceps/SmartForceps Data/SmartForcepsDataSummary.RData"
)
knitr::opts_chunk$set(echo = FALSE)
data_info <- read.xls ("~/Desktop/Canada/neuroArm/SmartForceps/SmartForceps Data/Data Info.xlsx",
sheet = 1, header = TRUE)
rm(list = ls()) # clear global environment
graphics.off() # close all graphics
library(pacman) # needs to be installed first
p_load(
devtools,
usethis,
slam,
reshape2,
data.table,
gridExtra,
extrafont,
ISLR,
jpeg,
coda,
abind,
chron,
fmsb,
gdata,
stringr,
lubridate,
ggplot2,
ggpubr,
fBasics
)
data_info <- read.xls ("~/Desktop/Canada/neuroArm/SmartForceps/SmartForceps Data/Data Info.xlsx",
sheet = 1, header = TRUE)
data_dir <- "~/Desktop/Canada/neuroArm/SmartForceps/SmartForceps Data"
cases <- c(2:21)
# preparing each case data
for (i in cases) {
file_dir <- paste(c(data_dir, paste(c("Case", i), collapse = " "), "log data"), collapse ="/")
temp <- list.files(path = file_dir, pattern = "*.txt")
my_data <- data.frame()
for (j in 1:length(temp)) {
read_txt <- read.delim(paste(c(file_dir, temp[j]), collapse = "/"))
my_data <- rbind(my_data,
cbind(data.frame(DataSection = rep(j, dim(read_txt)[1])),
read_txt))
assign(paste0("case_", i, "_forcedata"), my_data)
}}
# concatenating case data
force_seg_data <- data.frame()
force_seg_info <- data.frame()
task_count <- c(0,0,0,0,0)
outlier_count <- 0
for (i in 1:length(cases)) {
case_i_info <- data_info[data_info[, "Case"] == cases[i],]
case_i_data <- get(paste(c("case", cases[i], "forcedata"), collapse = "_"))
case_i_secpowerupstartidxs <- c(1, which(diff(case_i_data$DataSection) != 0) + 1)
case_i_secpoweruptimes <- case_i_data$MillisecondsSincePowerUp[case_i_secpowerupstartidxs]
for (j in 1:dim(case_i_info)[1]) {
data_section <-
as.numeric(strsplit(toString(case_i_info$Remarks[j]), split = " ")[[1]][2])
task_type <-
strsplit(str_sub(case_i_info$Task[j]), split = " ")[[1]][1]
t_start <-
as.numeric(seconds(hms(case_i_info$TimeStart[j]))) * 1000 + case_i_secpoweruptimes[data_section]
t_end <-
as.numeric(seconds(hms(case_i_info$TimeEnd[j]))) * 1000 + case_i_secpoweruptimes[data_section]
idx_start <-
as.numeric(rownames(case_i_data[case_i_data[, "MillisecondsSincePowerUp"] == t_start, ]))
idx_end <-
as.numeric(rownames(case_i_data[case_i_data[, "MillisecondsSincePowerUp"] == t_end, ]))
# filtering the outliers: cutoffValues = [time, max value, min value, task id]
taskCutoffValues <- switch(task_type,
"Coagulation"  = c(70,1.5, 1, 1),
"Pulling"      = c(30,1.5, 1, 2),
"Manipulation" = c(30,1.5,0.5,3),
"Dissecting"   = c(50,1.5,0.5,4),
"Retracting"   = c(20,1.5,0.5,5),)
segDur <- length(idx_end:idx_start)*0.05-0.05
segMax <- mean(max(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]),
max(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]))
segMin <- abs(mean(min(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]),
min(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])))
if(sum(c(segDur, segMax, segMin) < taskCutoffValues[1:3]) == 3){
task_count[taskCutoffValues[4]] <- task_count[taskCutoffValues[4]] + 1
# segment data
force_seg_data <- rbind(
force_seg_data,
data.frame(
"CaseNum" = rep(cases[i], length(idx_end:idx_start)),
"SegmentNum" = rep(j, length(idx_end:idx_start)),
"SegmentNumTask" = rep(task_count[taskCutoffValues[4]] ,length(idx_end:idx_start)),
"Time" = seq(0, length(idx_end:idx_start)*0.05-0.05, by=0.05),
"LeftForce" = case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"],
"RightForce" = case_i_data[idx_start:idx_end, "RightCalibratedForceValue"],
"TaskType" = rep(task_type, length(idx_end:idx_start))
))
# segment info
force_seg_info <- rbind(
force_seg_info,
data.frame(
"CaseNum" = cases[i],
"SegmentNum" = j,
"MeanForceLeft" = round(mean(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]), digits=4),
"MeanForceRight" = round(mean(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]), digits=4),
"MaxForceLeft" = round(max(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]), digits=4),
"MaxForceRight" = round(max(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]), digits=4),
"MinForceLeft" = round(min(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]), digits=4),
"MinForceRight" = round(min(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]), digits=4),
"RangeForceLeft" = round(abs(diff(range(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]))), digits=4),
"RangeForceRight" = round(abs(diff(range(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]))), digits=4),
"DurationForce" = round(length(idx_end:idx_start)*0.05-0.05, digits=4),
"Frequency" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[1]),
"Nperiods" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[2]),
"SeasonaPeriod" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[3]),
"Trend" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[4]),
"Spike" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[5]),
"Linearity" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[6]),
"Curvature" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[7]),
"AutocorrFuncE1" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[8]),
"AutocorrFuncE10" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[9]),
"Entropy" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[10]),
"AutocorrFuncX1" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[11]),
"AutocorrFuncX10" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[12]),
"DiffAutocorrFunc1" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[13]),
"DiffAutocorrFunc10" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[14]),
"DDiffAutocorrFunc1" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[15]),
"DDiffAutocorrFunc10" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[16]),
"TaskType" = task_type
))
}
else {
#print("outlier detected")
outlier_count <- outlier_count + 1
}
}
}
rm(list = ls()) # clear global environment
graphics.off() # close all graphics
library(pacman) # needs to be installed first
p_load(
devtools,
usethis,
slam,
reshape2,
data.table,
gridExtra,
extrafont,
ISLR,
jpeg,
coda,
abind,
chron,
fmsb,
gdata,
stringr,
lubridate,
ggplot2,
ggpubr,
fBasics,
tsfeatures
)
data_info <- read.xls ("~/Desktop/Canada/neuroArm/SmartForceps/SmartForceps Data/Data Info.xlsx",
sheet = 1, header = TRUE)
data_dir <- "~/Desktop/Canada/neuroArm/SmartForceps/SmartForceps Data"
cases <- c(2:21)
# preparing each case data
for (i in cases) {
file_dir <- paste(c(data_dir, paste(c("Case", i), collapse = " "), "log data"), collapse ="/")
temp <- list.files(path = file_dir, pattern = "*.txt")
my_data <- data.frame()
for (j in 1:length(temp)) {
read_txt <- read.delim(paste(c(file_dir, temp[j]), collapse = "/"))
my_data <- rbind(my_data,
cbind(data.frame(DataSection = rep(j, dim(read_txt)[1])),
read_txt))
assign(paste0("case_", i, "_forcedata"), my_data)
}}
# concatenating case data
force_seg_data <- data.frame()
force_seg_info <- data.frame()
task_count <- c(0,0,0,0,0)
outlier_count <- 0
for (i in 1:length(cases)) {
case_i_info <- data_info[data_info[, "Case"] == cases[i],]
case_i_data <- get(paste(c("case", cases[i], "forcedata"), collapse = "_"))
case_i_secpowerupstartidxs <- c(1, which(diff(case_i_data$DataSection) != 0) + 1)
case_i_secpoweruptimes <- case_i_data$MillisecondsSincePowerUp[case_i_secpowerupstartidxs]
for (j in 1:dim(case_i_info)[1]) {
data_section <-
as.numeric(strsplit(toString(case_i_info$Remarks[j]), split = " ")[[1]][2])
task_type <-
strsplit(str_sub(case_i_info$Task[j]), split = " ")[[1]][1]
t_start <-
as.numeric(seconds(hms(case_i_info$TimeStart[j]))) * 1000 + case_i_secpoweruptimes[data_section]
t_end <-
as.numeric(seconds(hms(case_i_info$TimeEnd[j]))) * 1000 + case_i_secpoweruptimes[data_section]
idx_start <-
as.numeric(rownames(case_i_data[case_i_data[, "MillisecondsSincePowerUp"] == t_start, ]))
idx_end <-
as.numeric(rownames(case_i_data[case_i_data[, "MillisecondsSincePowerUp"] == t_end, ]))
# filtering the outliers: cutoffValues = [time, max value, min value, task id]
taskCutoffValues <- switch(task_type,
"Coagulation"  = c(70,1.5, 1, 1),
"Pulling"      = c(30,1.5, 1, 2),
"Manipulation" = c(30,1.5,0.5,3),
"Dissecting"   = c(50,1.5,0.5,4),
"Retracting"   = c(20,1.5,0.5,5),)
segDur <- length(idx_end:idx_start)*0.05-0.05
segMax <- mean(max(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]),
max(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]))
segMin <- abs(mean(min(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]),
min(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])))
if(sum(c(segDur, segMax, segMin) < taskCutoffValues[1:3]) == 3){
task_count[taskCutoffValues[4]] <- task_count[taskCutoffValues[4]] + 1
# segment data
force_seg_data <- rbind(
force_seg_data,
data.frame(
"CaseNum" = rep(cases[i], length(idx_end:idx_start)),
"SegmentNum" = rep(j, length(idx_end:idx_start)),
"SegmentNumTask" = rep(task_count[taskCutoffValues[4]] ,length(idx_end:idx_start)),
"Time" = seq(0, length(idx_end:idx_start)*0.05-0.05, by=0.05),
"LeftForce" = case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"],
"RightForce" = case_i_data[idx_start:idx_end, "RightCalibratedForceValue"],
"TaskType" = rep(task_type, length(idx_end:idx_start))
))
# segment info
force_seg_info <- rbind(
force_seg_info,
data.frame(
"CaseNum" = cases[i],
"SegmentNum" = j,
"MeanForceLeft" = round(mean(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]), digits=4),
"MeanForceRight" = round(mean(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]), digits=4),
"MaxForceLeft" = round(max(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]), digits=4),
"MaxForceRight" = round(max(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]), digits=4),
"MinForceLeft" = round(min(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]), digits=4),
"MinForceRight" = round(min(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]), digits=4),
"RangeForceLeft" = round(abs(diff(range(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]))), digits=4),
"RangeForceRight" = round(abs(diff(range(case_i_data[idx_start:idx_end, "RightCalibratedForceValue"]))), digits=4),
"DurationForce" = round(length(idx_end:idx_start)*0.05-0.05, digits=4),
"Frequency" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[1]),
"Nperiods" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[2]),
"SeasonaPeriod" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[3]),
"Trend" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[4]),
"Spike" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[5]),
"Linearity" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[6]),
"Curvature" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[7]),
"AutocorrFuncE1" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[8]),
"AutocorrFuncE10" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[9]),
"Entropy" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[10]),
"AutocorrFuncX1" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[11]),
"AutocorrFuncX10" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[12]),
"DiffAutocorrFunc1" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[13]),
"DiffAutocorrFunc10" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[14]),
"DDiffAutocorrFunc1" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[15]),
"DDiffAutocorrFunc10" = as.numeric(tsfeatures(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])[16]),
"TaskType" = task_type
))
}
else {
#print("outlier detected")
outlier_count <- outlier_count + 1
}
}
}
force_summary <-
data.frame(
"Coagulation.mean" = round(colMeans(force_seg_info[force_seg_info$TaskType %in% 'Coagulation', 3:11]), digits=4),
"Coagulation.std" = round(colStdevs(force_seg_info[force_seg_info$TaskType %in% 'Coagulation', 3:11]), digits=4),
"Pulling.mean" = round(colMeans(force_seg_info[force_seg_info$TaskType %in% 'Pulling', 3:11]), digits=4),
"Pulling.std" = round(colStdevs(force_seg_info[force_seg_info$TaskType %in% 'Pulling', 3:11]), digits=4),
"Manipulation.mean" = round(colMeans(force_seg_info[force_seg_info$TaskType %in% 'Manipulation', 3:11]), digits=4),
"Manipulation.std" = round(colStdevs(force_seg_info[force_seg_info$TaskType %in% 'Manipulation', 3:11]), digits=4),
"Dissecting.mean" = round(colMeans(force_seg_info[force_seg_info$TaskType %in% 'Dissecting', 3:11]), digits=4),
"Dissecting.std" = round(colStdevs(force_seg_info[force_seg_info$TaskType %in% 'Dissecting', 3:11]), digits=4),
"Retracting.mean" = round(colMeans(force_seg_info[force_seg_info$TaskType %in% 'Retracting', 3:11]), digits=4),
"Retracting.std" = round(colStdevs(force_seg_info[force_seg_info$TaskType %in% 'Retracting', 3:11]), digits=4)
)
force_summary
View(force_summary)
ts(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])
decompose(ts(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]), type="mult")
decompose(ts(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"]), type="additive")
decompose(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"], type="additive")
EuStockMarkets[, 1]
tsData <- EuStockMarkets[, 1]
decompose(tsData, type="additive")
decomposedRes <- decompose(tsData, type="mult")
View(decomposedRes)
plot(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])
tsData
tsfeatures(tsData)
ts(case_i_data[idx_start:idx_end, "LeftCalibratedForceValue"])
load("~/Documents/GitHub/dash-sample-apps/apps/dashr-studybrowser/app.R")
install.packages(c("dashCoreComponents", "dashHtmlComponents"))
r <- getOption("repos")
install.packages("jsonlite")
# installs Rcpp, rlang, BH
install.packages("later")
# R script to run author supplied code, typically used to install additional R packages
# contains placeholders which are inserted by the compile script
# NOTE: this script is executed in the chroot context; check paths!
r <- getOption("repos")
r["CRAN"] <- "http://cloud.r-project.org"
options(repos=r)
# ======================================================================
# packages go here
install.packages("remotes")
# installs Rcpp, rlang, BH
install.packages("later")
install.packages("jsonlite")
install.packages("listenv")
# installs magrittr, promises, R6
remotes::install_version("httpuv", version = "1.4.5.1", repos = "http://cloud.r-project.org", upgrade="never")
# installs crayon, digest, htmltools, mime, sourcetools, xtable
remotes::install_version("shiny", version = "1.2.0", repos = "http://cloud.r-project.org", upgrade="never")
# installs askpass, assertthat, base64enc, cli, colorspace, crosstalk, curl, data.table, dplyr, fansi, ggplot2, glue, gtable, hexbin, htmlwidgets, httr, labeling, lattice, lazyeval, mgcv, munsell, nlme, openssl, pillar, pkgconfig, plogr, plyr, purrr, RColorBrewer, reshape2, scales, stringi, stringr, sys, tibble, tidyr, tidyselect, utf8, viridisLite, withr, yaml
remotes::install_version("plotly", version = "4.9.0", repos = "http://cloud.r-project.org", upgrade="never")
install.packages("https://cloud.r-project.org/src/contrib/assertthat_0.2.1.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/xml2_1.2.0.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/triebeard_0.3.0.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/Archive/urltools/urltools_1.7.2.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/jsonlite_1.6.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/webutils_0.6.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/brotli_1.2.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/reqres_0.2.2.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/uuid_0.1-2.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/base64enc_0.1-3.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/codetools_0.2-16.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/globals_0.12.4.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/Archive/future/future_1.11.1.1.tar.gz", type="source", repos=NULL)
# fiery and friends
install.packages("https://cloud.r-project.org/src/contrib/routr_0.3.0.tar.gz", type="source", repos=NULL)
install.packages("https://cloud.r-project.org/src/contrib/fiery_1.1.1.tar.gz", type="source", repos=NULL)
remotes::install_github("plotly/dashR", dependencies=FALSE)
remotes::install_github("plotly/dash-html-components")
remotes::install_github("plotly/dash-core-components")
Img(src="./assets/logo.png")
http://127.0.0.1:8050
getwd()
setwd('/Users/amir/Documents/GitHub/dash-sample-apps/apps/dashr-smartforceps')
df <- read.csv('data/indicators.csv', header = TRUE, sep = ",")
getwd()
Aavailable_indicators <- unique(df$Indicator_Name)
default_study_data <- fread('assets/study.csv')
library(jsonlite)
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(data.table)
library(stringr)
library(magrittr)
library(foreach)
library(rlist)
library(glue)
library(plotly)
default_study_data <- fread('assets/study.csv')
